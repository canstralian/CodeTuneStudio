[project]
name = "codetunestudio"
version = "0.1.1"
description = "AI-powered ML model fine-tuning platform with PEFT/LoRA support, real-time monitoring, and extensible plugin architecture"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "CodeTuneStudio Team", email = "support@codetunestudio.dev"}
]
maintainers = [
    {name = "CodeTuneStudio Team", email = "support@codetunestudio.dev"}
]
keywords = [
    "machine-learning",
    "fine-tuning",
    "peft",
    "lora",
    "transformers",
    "ml-training",
    "model-optimization",
    "ai",
    "deep-learning",
    "pytorch",
    "streamlit"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "accelerate>=1.3.0",
    "alembic>=1.14.1",
    "anthropic>=0.45.2",
    "argilla>=2.7.0",
    "bitsandbytes>=0.45.1",
    "datasets>=3.2.0",
    "evaluate>=0.4.3",
    "flask>=3.1.0",
    "flask-migrate>=4.1.0",
    "flask-sqlalchemy>=3.1.1",
    "numpy>=2.2.2",
    "openai>=1.61.1",
    "peft>=0.14.0",
    "plotly>=6.0.0",
    "psycopg2-binary>=2.9.10",
    "sqlalchemy>=2.0.37",
    "streamlit>=1.43.2",
    "torch>=2.6.0",
    "transformers>=4.48.2",
    "twilio>=9.4.4",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-html>=4.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "flake8>=7.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=24.0.0",
    "pydantic>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/canstralian/CodeTuneStudio"
Documentation = "https://github.com/canstralian/CodeTuneStudio/blob/main/CLAUDE.md"
Repository = "https://github.com/canstralian/CodeTuneStudio.git"
Issues = "https://github.com/canstralian/CodeTuneStudio/issues"
Changelog = "https://github.com/canstralian/CodeTuneStudio/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
exclude = ["attached_assets*", "migrations*"]

[tool.setuptools.package-dir]
"" = "."

[project.scripts]
codetunestudio = "app:main"

[[tool.uv.index]]
explicit = true
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"

[tool.uv.sources]
torch = [{ index = "pytorch-cpu", marker = "platform_system == 'Linux'" }]
torchvision = [{ index = "pytorch-cpu", marker = "platform_system == 'Linux'" }]

[tool.ruff]
# Set the maximum line length to 88 (Black's default)
line-length = 88
# Set the minimum Python version to support
target-version = "py311"
# Exclude common directories and files
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "migrations/",
    "venv/",
    "build/",
    "dist/",
    "*.egg-info/",
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-annotations
    "ANN",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-django
    "DJ",
    # flake8-errmsg
    "EM",
    # flake8-executable
    "EXE",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Pylint
    "PL",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Airflow
    "AIR",
    # Perflint
    "PERF",
    # Refurb
    "FURB",
    # flake8-logging
    "LOG",
    # Ruff-specific rules
    "RUF",
]

# Rules to ignore
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls
    "FBT003",
    # Ignore complexity issues
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    # Allow print statements (useful for debugging ML models)
    "T201",
    # Allow assert statements (common in ML/data science)
    "S101",
    # Allow subprocess without shell=False (might be needed for some ML tools)
    "S603",
    "S607",
    # Allow hardcoded passwords in examples/tests
    "S105",
    "S106",
    # Allow magic values (common in ML hyperparameters)
    "PLR2004",
    # Allow broad exception handling (common in ML pipelines)
    "BLE001",
    "TRY003",
    # Allow missing docstrings in some cases
]

# Allow unfixable rules
unfixable = [
    # Don't touch imports
    "F401",
    # Don't remove commented-out code
    "ERA001",
]

# Files to always ignore
per-file-ignores = {}

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = false
known-first-party = ["core", "utils", "components", "models", "plugins"]
known-third-party = [
    "anthropic",
    "flask",
    "sqlalchemy",
    "transformers",
    "torch",
    "numpy",
    "pandas",
    "datasets",
    "accelerate",
    "peft",
    "bitsandbytes",
    "openai",
    "streamlit",
    "plotly",
    "twilio",
    "argilla",
    "evaluate",
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `Field` in class attributes
classmethod-decorators = ["classmethod", "pydantic.field_validator", "pydantic.model_validator"]

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Automatically detect line ending
line-ending = "auto"

[tool.pytest.ini_options]
# Pytest configuration
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
# Coverage configuration
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/migrations/*",
    "*/build/*",
    "*/dist/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
# Coverage reporting
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
# Bandit security configuration
exclude_dirs = [
    "/tests/",
    "/venv/",
    "/.venv/",
    "/migrations/",
]
skips = [
    "B101",  # assert_used - common in tests
    "B601",  # paramiko_calls - if using paramiko
]

[tool.mypy]
# MyPy type checking configuration
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "anthropic.*",
    "openai.*",
    "transformers.*",
    "torch.*",
    "datasets.*",
    "peft.*",
    "accelerate.*",
]
ignore_missing_imports = true
