name: CI + AI Comment Commands

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]  # Standardized to Python 3.10
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Enables caching for pip dependencies

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest -q --disable-warnings --maxfail=1

  ai-command:
    name: Respond to PR Comments
    if: github.event.issue.pull_request # Only run on PR comments
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Parse comment and trigger command
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim().toLowerCase();
            const issue_number = context.payload.issue.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;

            const commands = {
              '/gemini review': 'üß† Running Gemini code review...',
              '/killer optimize': '‚öôÔ∏è Running Killer Code optimization routine...',
              '/claude summarize': 'üóíÔ∏è Claude is generating a summary of this PR...',
              '/dependabot rebase': 'üîÅ Dependabot rebase requested.',
              '/copilot explain': 'ü§ñ Copilot explanation initiated...',
            };

            try {
              const response = commands[comment];
              if (response) {
                console.log(`Processing command: ${comment}`);
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body: response,
                });
              } else {
                console.warn(`Unrecognized command: ${comment}`);
              }
            } catch (error) {
              console.error(`Error processing command: ${error.message}`);
            }